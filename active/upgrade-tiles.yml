---
resource_types:

  - name: slack-alert
    type: docker-image
    source:
      repository: arbourd/concourse-slack-alert-resource

resources:

  - name: notify
    type: slack-alert
    icon: slack
    source:
      url: ((slack_webhook))

  - name: platform-automation-tasks
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_platform_automation))
      regexp: .*tasks-(.*).zip
      disable_ssl: true

  - name: platform-automation-image
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_platform_automation))
      regexp: .*image-(.*).tgz
      disable_ssl: true

  - name: pas-srt-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pas-srt-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: pas-srt-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: srt-(.*).pivotal
      disable_ssl: true

  - name: pas-srt-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/pas-srt/config.yml

  - name: healthwatch-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: healthwatch-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: healthwatch-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-healthwatch-(.*).pivotal
      disable_ssl: true

  - name: healthwatch-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/healthwatch/config.yml

  - name: redis-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: redis-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: redis-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-redis-(.*).pivotal
      disable_ssl: true

  - name: redis-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/redis/config.yml

  - name: pks-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pks-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: pks-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pivotal-container-service-(.*).pivotal
      disable_ssl: true

  - name: pks-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/pks/config.yml

  - name: harbor-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: harbor-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: harbor-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: harbor-container-registry-(.*).pivotal
      disable_ssl: true

  - name: harbor-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/harbor/config.yml

  - name: mysql-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: mysql-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: mysql-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pivotal-mysql-(.*).pivotal
      disable_ssl: true

  - name: mysql-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/mysql/config.yml

  - name: pcc-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pcc-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: pcc-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-cloudcache-(.*).pivotal
      disable_ssl: true

  - name: pcc-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/pcc/config.yml

  - name: rabbitmq-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: rabbitmq-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: rabbitmq-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-rabbitmq-(.*).pivotal
      disable_ssl: true

  - name: rabbitmq-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/rabbitmq/config.yml

  - name: scdf-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: scdf-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: scdf-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-dataflow-(.*).pivotal
      disable_ssl: true

  - name: scdf-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/scdf/config.yml

  - name: scs-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: scs-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: scs-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-spring-cloud-services-(.*).pivotal
      disable_ssl: true

  - name: scs-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/scs/config.yml

  # configurations
  - name: configuration
    type: git
    icon: github-circle
    source:
      uri: ((platform-automation-pipelines-kirklab-env))
      private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly.private_key))
      branch: master

  - name: variable
    type: git
    icon: github-circle
    source:
      uri: ((platform-automation-pipelines-kirklab-env))
      private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly.private_key))
      branch: master

jobs:
  - name: fetch-pas-srt
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-pas-srt-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/pas-srt.yml
      input_mapping:
        config: configuration
      output_mapping:
        downloaded-stemcell: pas-srt-stemcell
        assign-stemcell-config: pas-srt-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) product failed to download."
    - in_parallel:
      - put: pas-srt-product
        params:
          file: downloaded-product/*.pivotal
      - put: pas-srt-stemcell
        params:
          file: pas-srt-stemcell/*.tgz
      - put: pas-srt-stemcell-config
        params:
          file: pas-srt-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) product failed to upload."

  - name: upload-and-stage-pas
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-pas-srt
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-pas-srt
          - get: pas-srt-product
            trigger: true
            passed:
              - fetch-pas-srt
          - get: pas-srt-stemcell
            trigger: true
            passed:
              - fetch-pas-srt
          - get: pas-srt-stemcell-config
            trigger: true
            passed:
              - fetch-pas-srt
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-srt-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PAS failed to upload."
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-srt-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-pas-srt-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: pas-srt-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PAS stemcell failed to upload."
      - task: assign-pas-srt-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: pas-srt-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PAS stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) PAS uploaded, staged, and ready to apply."

  - name: fetch-harbor
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-harbor-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/harbor.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: harbor-stemcell
        assign-stemcell-config: harbor-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Harbor failed to download."
    - in_parallel:
      - put: harbor-product
        params:
          file: downloaded-product/*.pivotal
      - put: harbor-stemcell
        params:
          file: harbor-stemcell/*.tgz
      - put: harbor-stemcell-config
        params:
          file: harbor-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Harbor failed to upload."

  - name: upload-and-stage-harbor
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-harbor
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-harbor
          - get: harbor-product
            trigger: true
            passed:
              - fetch-harbor
          - get: harbor-stemcell
            trigger: true
            passed:
              - fetch-harbor
          - get: harbor-stemcell-config
            trigger: true
            passed:
              - fetch-harbor
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: harbor-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Harbor failed to upload/stage."
      - task: upload-harbor-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: harbor-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Harbor stemcell failed to upload."
      - task: assign-harbor-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: harbor-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Harbor stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) Harbor uploaded, staged, and ready to apply."

  - name: fetch-mysql
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-mysql-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/mysql.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: mysql-stemcell
        assign-stemcell-config: mysql-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) MySQL failed to download."
    - in_parallel:
      - put: mysql-product
        params:
          file: downloaded-product/*.pivotal
      - put: mysql-stemcell
        params:
          file: mysql-stemcell/*.tgz
      - put: mysql-stemcell-config
        params:
          file: mysql-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) MySQL failed to upload."

  - name: upload-and-stage-mysql
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-mysql
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-mysql
          - get: mysql-product
            trigger: true
            passed:
              - fetch-mysql
          - get: mysql-stemcell
            trigger: true
            passed:
              - fetch-mysql
          - get: mysql-stemcell-config
            trigger: true
            passed:
              - fetch-mysql
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: mysql-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) MySQL failed to upload/stage."
      - task: upload-mysql-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: mysql-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) MySQL stemcell failed to upload."
      - task: assign-mysql-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: mysql-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) MySQL stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) MySQL uploaded, staged, and ready to apply."

  - name: fetch-pcc
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-pcc-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/pcc.yml
      input_mapping:
        config: configuration
      #output_mapping: 
      #  downloaded-stemcell: pcc-stemcell
      #  assign-stemcell-config: pcc-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PCC failed to download."
    - in_parallel:
      - put: pcc-product
        params:
          file: downloaded-product/*.pivotal
      #- put: pcc-stemcell
      #  params:
      #    file: pcc-stemcell/*.tgz
      #- put: pcc-stemcell-config
      #  params:
      #    file: pcc-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PCC failed to upload."

  - name: upload-and-stage-pcc
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-pcc
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-pcc
          - get: pcc-product
            trigger: true
            passed:
              - fetch-pcc
          - get: pcc-stemcell
            trigger: true
            passed:
              - fetch-pcc
          - get: pcc-stemcell-config
            trigger: true
            passed:
              - fetch-pcc
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: pcc-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PCC failed to upload/stage."
      - task: upload-pcc-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: pcc-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PCC stemcell failed to upload."
      - task: assign-pcc-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: pcc-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PCC stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) PCC uploaded, staged, and ready to apply."

  - name: fetch-pks
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-pks-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/pks.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: pks-stemcell
        assign-stemcell-config: pks-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PKS failed to download."
    - in_parallel:
      - put: pks-product
        params:
          file: downloaded-product/*.pivotal
      - put: pks-stemcell
        params:
          file: pks-stemcell/*.tgz
      - put: pks-stemcell-config
        params:
          file: pks-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PKS failed to upload."

  - name: upload-and-stage-pks
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-pks
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-pks
          - get: pks-product
            trigger: true
            passed:
              - fetch-pks
          - get: pks-stemcell
            trigger: true
            passed:
              - fetch-pks
          - get: pks-stemcell-config
            trigger: true
            passed:
              - fetch-pks
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: pks-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PKS failed to upload/stage."
      - task: upload-pks-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: pks-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PKS stemcell failed to upload."
      - task: assign-pks-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: pks-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) PKS stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) PKS uploaded, staged, and ready to apply."

  - name: fetch-rabbitmq
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-rabbitmq-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/rabbitmq.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: rabbitmq-stemcell
        assign-stemcell-config: rabbitmq-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) RabbitMQ failed to download."
    - in_parallel:
      - put: rabbitmq-product
        params:
          file: downloaded-product/*.pivotal
      - put: rabbitmq-stemcell
        params:
          file: rabbitmq-stemcell/*.tgz
      - put: rabbitmq-stemcell-config
        params:
          file: rabbitmq-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) RabbitMQ failed to upload."

  - name: upload-and-stage-rabbitmq
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-rabbitmq
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-rabbitmq
          - get: rabbitmq-product
            trigger: true
            passed:
              - fetch-rabbitmq
          - get: rabbitmq-stemcell
            trigger: true
            passed:
              - fetch-rabbitmq
          - get: rabbitmq-stemcell-config
            trigger: true
            passed:
              - fetch-rabbitmq
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: rabbitmq-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) RabbitMQ failed to upload/stage."
      - task: upload-rabbitmq-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: rabbitmq-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) RabbitMQ stemcell failed to upload."
      - task: assign-rabbitmq-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: rabbitmq-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) RabbitMQ stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) RabbitMQ uploaded, staged, and ready to apply."

  - name: fetch-scdf
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-scdf-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/scdf.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: scdf-stemcell
        assign-stemcell-config: scdf-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) SCDF failed to download."
    - in_parallel:
      - put: scdf-product
        params:
          file: downloaded-product/*.pivotal
      - put: scdf-stemcell
        params:
          file: scdf-stemcell/*.tgz
      - put: scdf-stemcell-config
        params:
          file: scdf-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) SCDF failed to upload."

  - name: upload-and-stage-scdf
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-scdf
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-scdf
          - get: scdf-product
            trigger: true
            passed:
              - fetch-scdf
          - get: scdf-stemcell
            trigger: true
            passed:
              - fetch-scdf
          - get: scdf-stemcell-config
            trigger: true
            passed:
              - fetch-scdf
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: scdf-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCDF failed to upload/stage."
      - task: upload-scdf-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: scdf-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCDF stemcell failed to upload."
      - task: assign-scdf-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: scdf-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCDF stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) SCDF uploaded, staged, and ready to apply."

  - name: fetch-scs
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-scs-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/scs.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: scs-stemcell
        assign-stemcell-config: scs-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) SCS failed to download."
    - in_parallel:
      - put: scs-product
        params:
          file: downloaded-product/*.pivotal
      - put: scs-stemcell
        params:
          file: scs-stemcell/*.tgz
      - put: scs-stemcell-config
        params:
          file: scs-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) SCS failed to upload."

  - name: upload-and-stage-scs
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-scs
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-scs
          - get: scs-product
            trigger: true
            passed:
              - fetch-scs
          - get: scs-stemcell
            trigger: true
            passed:
              - fetch-scs
          - get: scs-stemcell-config
            trigger: true
            passed:
              - fetch-scs
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: scs-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCS failed to upload/stage."
      - task: upload-scs-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: scs-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCS stemcell failed to upload."
      - task: assign-scs-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: scs-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) SCS stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) SCS uploaded, staged, and ready to apply."


  - name: fetch-healthwatch
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-healthwatch-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/healthwatch.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: healthwatch-stemcell
        assign-stemcell-config: healthwatch-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Healthwatch failed to download."
    - in_parallel:
      - put: healthwatch-product
        params:
          file: downloaded-product/*.pivotal
      - put: healthwatch-stemcell
        params:
          file: healthwatch-stemcell/*.tgz
      - put: healthwatch-stemcell-config
        params:
          file: healthwatch-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Healthwatch failed to upload."

  - name: upload-and-stage-healthwatch
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-healthwatch
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-healthwatch
          - get: healthwatch-product
            trigger: true
            passed:
              - fetch-healthwatch
          - get: healthwatch-stemcell
            trigger: true
            passed:
              - fetch-healthwatch
          - get: healthwatch-stemcell-config
            trigger: true
            passed:
              - fetch-healthwatch
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: healthwatch-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Healthwatch failed to upload/stage."
      - task: upload-healthwatch-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: healthwatch-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Healthwatch stemcell failed to upload."
      - task: assign-healthwatch-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: healthwatch-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Healthwatch stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) Healthwatch uploaded, staged, and ready to apply."

  - name: fetch-redis
    plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))/download-product-configs"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: download-redis-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: ((foundation))/download-product-configs/redis.yml
      input_mapping:
        config: configuration
      output_mapping: 
        downloaded-stemcell: redis-stemcell
        assign-stemcell-config: redis-stemcell-config
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Redis failed to download."
    - in_parallel:
      - put: redis-product
        params:
          file: downloaded-product/*.pivotal
      - put: redis-stemcell
        params:
          file: redis-stemcell/*.tgz
      - put: redis-stemcell-config
        params:
          file: redis-stemcell-config/config.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) Redis failed to upload."

  - name: upload-and-stage-redis
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - fetch-redis
          - get: platform-automation-tasks
            params:
              unpack: true
            passed:
              - fetch-redis
          - get: redis-product
            trigger: true
            passed:
              - fetch-redis
          - get: redis-stemcell
            trigger: true
            passed:
              - fetch-redis
          - get: redis-stemcell-config
            trigger: true
            passed:
              - fetch-redis
          - get: configuration
          - get: variable
      - task: credhub-interpolate
        image: platform-automation-image
        file: platform-automation-tasks/tasks/credhub-interpolate.yml
        params:
          CREDHUB_CLIENT: ((credhub_client))
          CREDHUB_SECRET: ((credhub_secret))
          CREDHUB_SERVER: ((credhub_server))
          CREDHUB_CA_CERT: ((credhub_ca_cert))
          PREFIX: /((foundation))
          INTERPOLATION_PATH: "((foundation))"
        input_mapping:
          files: configuration
        output_mapping:
          interpolated-files: configuration
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: redis-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Redis failed to upload."
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: redis-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-redis-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: redis-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
          FLOATING_STEMCELL: false
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Redis stemcell failed to upload."
      - task: assign-redis-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/assign-stemcell.yml
        input_mapping:
          env: configuration
          config: redis-stemcell-config
        params:
          ENV_FILE: ((foundation))/env/env.yml
        on_failure:
          put: notify
          params:
            alert_type: failed
            message: "((foundation)) Redis stemcell failed to assign."
        on_success:
          put: notify
          params:
            alert_type: success
            text: "((foundation)) Redis uploaded, staged, and ready to apply."

