---
platform: linux

inputs:
- name: config # contains download-file config file
- name: env
- name: download-config
- name: vars # variable files to be made available
  optional: true
- name: secrets
  optional: true

params:
  VARS_FILES:
  # - Optional
  # - Filepath to the Ops Manager vars yaml file
  # - The path is relative to root of the task build,
  #   so `vars` and `secrets` can be used.

  ENV_FILE: env.yml
  # - Filepath of the env config YAML
  # - Relative to root of the `env` input

  DOWNLOAD_CONFIG_FILE: product-version.yml
  # - Filepath to the download product configuration yaml file
  # - The path is relative to the root of the `download-config` input

  DOWNLOAD_STEMCELL_CONFIG_FILE: stemcell-version.yml
  # - Filepath to the download stemcell configuration yaml file
  # - The path is relative to the root of the `download-config` input

  CONFIG_FILE: config.yml
  # - Filepath to the product configuration yaml file
  # - The path is relative to the root of the `config` input

run:
  path: bash
  args:
  - "-c"
  - |
    cat /var/version && echo ""
    set -eux
    expected_version=$(bosh int download-config/${DOWNLOAD_CONFIG_FILE} --path /product-version)
    expected_product=$(bosh int config/${CONFIG_FILE} --path /product-name)
    staged_products=$(mktemp)
    om --env env/"${ENV_FILE}" staged-products -f json > ${staged_products}
    set +e
    # strip any build information from the staged version
    staged_version=$(bosh int ${staged_products} --path /name=${expected_product}/version | cut -d'-' -f 1)
    set -e
    vars_files_args=("")
    for vf in ${VARS_FILES}
    do
      vars_files_args+=("--vars-file ${vf}")
    done
    if [ "${expected_version}" = "${staged_version}" ]; then
      echo "${expected_version} already staged"
    else
      downloaded_files=$(mktemp -d)
      # shellcheck disable=SC2068
      om download-product \
         --config download-config/"${DOWNLOAD_CONFIG_FILE}" \
         --output-directory ${downloaded_files} \
         ${vars_files_args[@]}
      { printf "\nReading product details..."; } 2> /dev/null
      # shellcheck disable=SC2068
      product_slug=$(om interpolate \
         --config download-config/"${DOWNLOAD_CONFIG_FILE}" \
         --path /pivnet-product-slug ${vars_files_args[@]})
      product_file=$(om interpolate \
         --config ${downloaded_files}/download-file.json \
         --path /product_path)
      { printf "\nChecking if product needs winfs injected..."; } 2> /dev/null
      if [ "$product_slug" == "pas-windows" ]; then
         TILE_FILENAME="$(basename "$product_file")"
         # The winfs-injector determines the necessary windows image,
         # and uses the CF-foundation dockerhub repo
         # to pull the appropriate Microsoft-hosted foreign layer.
         winfs-injector \
         --input-tile "$product_file" \
         --output-tile "${downloaded_files}/${TILE_FILENAME}"
      fi
      om --env env/"${ENV_FILE}" upload-product \
         --product ${downloaded_files}/*.pivotal
      product_name="$(om tile-metadata \
         --product-path ${downloaded_files}/*.pivotal \
         --product-name)"
      product_version="$(om tile-metadata \
         --product-path ${downloaded_files}/*.pivotal \
         --product-version)"
      om --env env/"${ENV_FILE}" stage-product \
         --product-name "$product_name" \
         --product-version "$product_version"
      rm -rf ${downloaded_files}
    fi
    if [ -f "download-config/${DOWNLOAD_STEMCELL_CONFIG_FILE}" ]; then
      expected_stemcell_version=$(bosh int download-config/${DOWNLOAD_STEMCELL_CONFIG_FILE} --path /product-version)
      stemcell_assignments=$(mktemp)
      om --env env/"${ENV_FILE}" curl -p /api/v0/stemcell_assignments > ${stemcell_assignments}
      set +e
      bosh int ${stemcell_assignments} --path /stemcell_library/version=${expected_stemcell_version}
      rc=$?
      set -e
      if [ ${rc} -eq 0 ]; then
        echo "Expected stemcell version ${expected_stemcell_version} already installed"
      else
        downloaded_files=$(mktemp -d)
        om download-product \
           --config download-config/"${DOWNLOAD_STEMCELL_CONFIG_FILE}" \
           --output-directory ${downloaded_files} \
           ${vars_files_args[@]}
        om --env env/"${ENV_FILE}" upload-stemcell \
           --floating=false \
           --stemcell "${downloaded_files}"/*.tgz
        rm -rf ${downloaded_files}
      fi
      om --env env/"${ENV_FILE}" assign-stemcell --product ${expected_product} --stemcell ${expected_stemcell_version}
    fi