---
groups:
- name: deployment-pipeline
  jobs: 
    - fetch-pivnet-opsman
    - lock-kirklab
    - lock-control
    - export-installation
    - upgrade-opsman
    - apply-product-changes
    - unlock-control
    - unlock-kirklab
- name: ad-hoc-jobs
  jobs: 
    - force-unlock-control
    - force-unlock-kirklab

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: slack-alert
  type: docker-image
  source:
    repository: arbourd/concourse-slack-alert-resource


resources:

- name: notify
  type: slack-alert
  icon: slack
  source:
    url: ((slack-webhook))

- name: lock-kirklab
  type: pool
  icon: lock
  source:
    branch: master
    uri: git@github.com:bkirkware/kirklab-locks
    private_key: ((platform-automation-pipelines-kirklab-locks-key-private-key))
    pool: kirklab
    retry_delay: 1m

- name: lock-control
  type: pool
  icon: lock
  source:
    branch: master
    uri: git@github.com:bkirkware/kirklab-locks
    private_key: ((platform-automation-pipelines-kirklab-locks-key-private-key))
    pool: ((foundation))
    retry_delay: 1m

- name: pivnet-opsman
  type: pivnet
  icon: file-powerpoint
  source:
    api_token: ((pivnet-refresh-token))
    product_slug: ops-manager
    product_version: ((product_version))

- name: opsman-product
  type: s3
  icon: file
  source:
    access_key_id: ((minio-access-key-id))
    secret_access_key: ((minio-secret-access-key))
    endpoint: ((minio-endpoint))
    bucket: ((foundation))-pivnet-products
    regexp: \[ops-manager,(.*)\].*.ova
    disable_ssl: true

- name: platform-automation-tasks
  type: s3
  icon: file
  source:
    access_key_id: ((minio-access-key-id))
    secret_access_key: ((minio-secret-access-key))
    endpoint: ((minio-endpoint))
    bucket: ((minio-buckets-platform-automation))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  icon: file
  source:
    access_key_id: ((minio-access-key-id))
    secret_access_key: ((minio-secret-access-key))
    endpoint: ((minio-endpoint))
    bucket: ((minio-buckets-platform-automation))
    regexp: .*image-(.*).tgz
- name: env
  type: git
  icon: github
  source:
    uri: ((platform-automation-pipelines-kirklab-env))
    private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly-private-key))
    branch: master
    
- name: installation
  type: s3
  icon: file-upload
  source:
    access_key_id: ((minio-access-key-id))
    secret_access_key: ((minio-secret-access-key))
    endpoint: ((minio-endpoint))
    bucket: ((foundation))-installation
    regexp: installation-(.*).zip

jobs:

- name: fetch-pivnet-opsman
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: env
    - get: pivnet-opsman
      trigger: true
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      tasks: platform-automation-tasks
      config: env
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: "((foundation))"
  #- task: credhub-interpolate
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  #  params:
  #    CREDHUB_CA_CERT: ((credhub-ca-cert))
  #    CREDHUB_CLIENT: ((credhub-client))
  #    CREDHUB_SECRET: ((credhub-secret))
  #    CREDHUB_SERVER: ((credhub-server))
  #    PREFIX: /((foundation))
  #    INTERPOLATION_PATH: "((foundation))"
  #  input_mapping:
  #    files: env
  #  output_mapping:
  #    interpolated-files: env
  - task: download-opsman-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/config/download-opsman.yml
    input_mapping:
      config: env
    output_mapping: 
      downloaded-product: opsman-product
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) opsman failed to download."
  - in_parallel:
    - put: opsman-product
      params:
        file: opsman-product/*.ova
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) opsman failed to upload."
    on_success:
      put: notify
      params:
        alert_type: default
        message: "((foundation)) ((product_shortname)) is on local storage and ready for upgrade."

- name: lock-kirklab
  plan:
  - in_parallel:
    - put: lock-kirklab
      params: {acquire: true}
    - get: opsman-product
      passed: [ fetch-pivnet-opsman ]
      #trigger: true

- name: lock-control
  plan:
  - in_parallel:
    - put: lock-control
      params: {acquire: true}
    - get: opsman-product
      passed: [ lock-kirklab ]
      trigger: true

- name: export-installation
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: env
    - get: opsman-product
      passed: [ lock-control ]
      trigger: true
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      tasks: platform-automation-tasks
      config: env
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: config
      ENV_FILE: ((foundation))/env/env.yml
  #- task: credhub-interpolate
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  #  input_mapping:
  #    files: env
  #  output_mapping:
  #    interpolated-files: env
  #  params:
  #    # all required
  #    CREDHUB_CA_CERT: ((credhub-ca-cert))
  #    CREDHUB_CLIENT: ((credhub-client))
  #    CREDHUB_SECRET: ((credhub-secret))
  #    CREDHUB_SERVER: ((credhub-server))
  #    PREFIX: /((foundation))
  #    ENV_FILE: ((foundation))/env/env.yml
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - put: installation
    params:
      file: installation/installation-*.zip

      
- name: upgrade-opsman
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: env
    - get: installation
    - get: opsman-product
      trigger: true
      passed:
        - export-installation
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      tasks: platform-automation-tasks
      config: env
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: "((foundation))"
  #- task: credhub-interpolate
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  #  params:
  #    CREDHUB_CLIENT: ((credhub-client))
  #    CREDHUB_SECRET: ((credhub-secret))
  #    CREDHUB_SERVER: ((credhub-server))
  #    CREDHUB_CA_CERT: ((credhub-ca-cert))
  #    PREFIX: /((foundation))
  #    # A file path that includes env.yml, opsman.yml, download-opsman.yml
  #    INTERPOLATION_PATH: ((foundation)) 
  #  input_mapping:
  #    files: env
  #  output_mapping:
  #    interpolated-files: env
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/config/download-opsman.yml
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) ops manager failed to download."
    input_mapping:
      config: env
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      config: env
      image: downloaded-product
      secrets: env
      state: env
    params:
      ENV_FILE: ((foundation))/env/env.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) ops manager failed to upgrade."


- name: apply-product-changes
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: env
    - get: opsman-product
      passed:
        - upgrade-opsman
      trigger: true
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      tasks: platform-automation-tasks
      config: env
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: "((foundation))"
  #- task: credhub-interpolate
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  #  params:
  #    CREDHUB_CA_CERT: ((credhub-ca-cert))
  #    CREDHUB_CLIENT: ((credhub-client))
  #    CREDHUB_SECRET: ((credhub-secret))
  #    CREDHUB_SERVER: ((credhub-server))
  #    PREFIX: /((foundation))
  #    INTERPOLATION_PATH: "((foundation))"
  #  input_mapping:
  #    files: env
  #  output_mapping:
  #    interpolated-files: env
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((foundation))/env/env.yml
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) apply changes failed."
    on_success:
      put: notify
      params:
        alert_type: success
        text: "((foundation)) ops manager and BOSH director successfully upgraded."

- name: unlock-control
  serial: true
  plan:
  - get: opsman-product
    trigger: true
    passed:
      - apply-product-changes
  - get: lock-control
  - put: lock-control
    params:
      release: lock-control


- name: unlock-kirklab
  serial: true
  plan:
  - get: opsman-product
    trigger: true
    passed:
      - unlock-control
  - get: lock-kirklab
  - put: lock-kirklab
    params:
      release: lock-kirklab

- name: force-unlock-control
  serial: true
  plan:
  - get: lock-control
  - put: lock-control
    params:
      release: lock-control

- name: force-unlock-kirklab
  serial: true
  plan:
  - get: lock-kirklab
  - put: lock-kirklab
    params:
      release: lock-kirklab