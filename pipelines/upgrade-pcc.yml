---
groups:
- name: deployment-pipeline
  jobs: 
    - fetch-pcc
    - lock-tiles
    - upload-and-stage-pcc
    - apply-product-changes
    - unlock-tile
- name: ad-hoc-jobs
  jobs: 
    - force-unlock



resource_types:

  - name: slack-alert
    type: docker-image
    source:
      repository: arbourd/concourse-slack-alert-resource

  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tags: latest-final

resources:

  - name: notify
    type: slack-alert
    icon: slack
    source:
      url: ((slack_webhook))

  - name: platform-automation-tasks
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_platform_automation))
      regexp: .*tasks-(.*).zip
      disable_ssl: true

  - name: platform-automation-image
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_platform_automation))
      regexp: .*image-(.*).tgz
      disable_ssl: true

  - name: pcc-stemcell
    type: s3
    icon: ubuntu
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: pcc-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      disable_ssl: true

  - name: pcc-product
    type: s3
    icon: file
    source:
      access_key_id: ((minio_access_key_id))
      secret_access_key: ((minio_secret_access_key))
      endpoint: ((minio_endpoint))
      bucket: ((minio_buckets_pivnet_products))
      regexp: p-cloudcache-(.*).pivotal
      disable_ssl: true

  - name: pcc-stemcell-config
    type: s3
    icon: file-document
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      region_name: ((aws_region_name))
      bucket: ((aws_buckets_assign_stemcell_config))
      versioned_file: ((foundation))/pcc/config.yml

  - name: lock
    type: pool
    icon: lock
    source:
      branch: master
      uri: git@github.com:bkirkware/kirklab-locks
      private_key: ((platform-automation-pipelines-kirklab-locks-key.private_key))
      pool: ((foundation))
      retry_delay: 1m

  # configurations
  - name: configuration
    type: git
    icon: github-circle
    source:
      uri: ((platform-automation-pipelines-kirklab-env))
      private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly.private_key))
      branch: master

  - name: variable
    type: git
    icon: github-circle
    source:
      uri: ((platform-automation-pipelines-kirklab-env))
      private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly.private_key))
      branch: master

jobs:

- name: force-unlock
  serial: true
  plan:
  - get: lock
  - put: lock
    params:
      release: lock

- name: fetch-pcc
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      PREFIX: /((foundation))
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: configuration
  - task: download-pcc-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/pcc.yml
    input_mapping:
      config: configuration
    output_mapping: 
      downloaded-stemcell: pcc-stemcell
      assign-stemcell-config: pcc-stemcell-config
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) PCC failed to download."
  - in_parallel:
    - put: pcc-product
      params:
        file: downloaded-product/*.pivotal
    - put: pcc-stemcell
      params:
        file: pcc-stemcell/*.tgz
    - put: pcc-stemcell-config
      params:
        file: pcc-stemcell-config/config.yml
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) PCC failed to upload."

- name: lock-tiles
  plan:
  - in_parallel:
    - put: lock
      params: {acquire: true}
    - get: pcc-product
      passed:
        - fetch-pcc
      trigger: true
      

- name: upload-and-stage-pcc
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: pcc-product
          passed:
            - lock-tiles
          trigger: true
        - get: pcc-stemcell
        - get: pcc-stemcell-config
        - get: configuration
        - get: variable
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: upload-and-stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: pcc-product
        env: configuration
      params:
        ENV_FILE: ((foundation))/env/env.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PCC failed to upload/stage."
    - task: upload-pcc-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: configuration
        stemcell: pcc-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
        FLOATING_STEMCELL: false
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PCC stemcell failed to upload."
    - task: assign-pcc-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/assign-stemcell.yml
      input_mapping:
        env: configuration
        config: pcc-stemcell-config
      params:
        ENV_FILE: ((foundation))/env/env.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) PCC stemcell failed to assign."
      on_success:
        put: notify
        params:
          alert_type: success
          text: "((foundation)) PCC uploaded, staged, and ready to apply."

  
- name: apply-product-changes
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
        - get: pcc-product
          passed:
            - upload-and-stage-pcc
          trigger: true
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      params:
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        PREFIX: /((foundation))
        INTERPOLATION_PATH: "((foundation))"
      input_mapping:
        files: configuration
      output_mapping:
        interpolated-files: configuration
    - task: apply-product-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: ((foundation))/env/env.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) apply changes failed."
      on_success:
        put: notify
        params:
          alert_type: success
          text: "((foundation)) apply changes succeeded."

- name: unlock-tile
  serial: true
  plan:
  - get: pcc-product
    passed:
      - apply-product-changes
    trigger: true
  - get: lock
  - put: lock
    params:
      release: lock