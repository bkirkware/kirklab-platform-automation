---
groups:
- name: deployment-pipeline
  jobs: 
    - lock-((foundation))
    - export-installation
    - unlock-((foundation))
- name: ad-hoc-jobs
  jobs: 
    - force-unlock

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: slack-alert
  type: docker-image
  source:
    repository: arbourd/concourse-slack-alert-resource
    
resources:

- name: notify
  type: slack-alert
  icon: slack
  source:
    url: ((slack_webhook))

- name: daily
  type: time
  icon: calendar
  source:
    interval: 24h
- name: platform-automation
  type: pivnet
  icon: file
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))
- name: env
  type: git
  icon: github-circle
  source:
    uri: ((platform-automation-pipelines-kirklab-env))
    private_key: ((platform-automation-pipelines-kirklab-deploy-key-readonly.private_key))
    branch: master
- name: minio
  type: s3
  icon: file-upload
  source:
    regexp: installation-(.*).zip
    endpoint: ((minio_endpoint))
    bucket: ((foundation))-installation
    access_key_id: ((minio_access_key_id))
    secret_access_key: ((minio_secret_access_key))
    disable_ssl: true

- name: lock
  type: pool
  icon: lock
  source:
    branch: master
    uri: git@github.com:bkirkware/kirklab-locks
    private_key: ((platform-automation-pipelines-kirklab-locks-key.private_key))
    pool: ((foundation))
    retry_delay: 1m
jobs:

- name: force-unlock
  serial: true
  plan:
  - get: lock
  - put: lock
    params:
      release: lock



- name: lock-((foundation))
  plan:
  - get: daily
    trigger: true
  - put: lock
    params: {acquire: true}
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) failed to lock."

- name: export-installation
  plan:
    - get: platform-automation-image
      resource: platform-automation
      params:
        globs: ["*image*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        globs: ["*tasks*.zip"]
        unpack: true
    - get: env
    - get: lock
      passed:
        - lock-((foundation))
      trigger: true
    - task: credhub-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/credhub-interpolate.yml
      input_mapping:
        files: env
      output_mapping:
        interpolated-files: env
      params:
        # all required
        CREDHUB_CA_CERT: ((credhub_ca_cert))
        CREDHUB_CLIENT: ((credhub_client))
        CREDHUB_SECRET: ((credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        PREFIX: /((foundation))
        ENV_FILE: ((foundation))/env/env.yml
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      params:
        ENV_FILE: ((foundation))/env/env.yml
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) export installation failed."
    - put: minio
      params:
        file: installation/installation-*.zip
      on_failure:
        put: notify
        params:
          alert_type: failed
          message: "((foundation)) export installation failed to upload."

- name: unlock-((foundation))
  serial: true
  plan:
  - get: lock
    passed:
      - export-installation
    trigger: true
  - put: lock
    params:
      release: lock
    on_failure:
      put: notify
      params:
        alert_type: failed
        message: "((foundation)) failed to unlock."